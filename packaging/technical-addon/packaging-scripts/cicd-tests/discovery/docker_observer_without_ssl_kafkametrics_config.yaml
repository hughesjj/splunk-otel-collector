extensions:
  host_observer:

# Normally, we test discovery mode by running the "raw" binary in our tests
# However, here our binary via the TA is running in a splunk docker instance
# The splunk image does not have docker installed by default
# Thus, either need to install and enable docker,
# Or need to bridge networks for discovery.
# Given lack of a package manager in splunk docker images, it's likely best to just use host networking.
receivers:
  # set up otlp receiver to use its endpoints as assertion material
  discovery:
    embed_receiver_config: true
    receivers:
      kafkametrics:
        config:
          #resource_attributes:
          #  testdiscoveryparam: {{ .testdiscoveryparam }}
          client_id: "otel-integration-test"
          protocol_version: "2.0.0"
          scrapers:
            - brokers
        #rule: type == "hostport"
        rule: type == "hostport" and any([name, image, command], {# matches "(?i)(.*)kafka(.*)"}) and not (command matches "splunk.discovery")
        status:
          metrics:
            - status: successful
              strict: kafka.brokers
              message: kafkametrics receiver is working!
          statements:
            - status: failed
              regexp: 'connect: network is unreachable'
              message: The container cannot be reached by the Collector. Make sure they're in the same network.
            - status: failed
              regexp: 'connect: connection refused'
              message: The container is refusing kafka connections.

    watch_observers:
      - host_observer

# drop scrape_timestamp attributes until we can accept arbitrary values
processors:

exporters:
  debug:
    verbosity: detailed

service:
  telemetry:
    logs:
      level: debug
  extensions:
    - host_observer
  pipelines:
    logs:
      receivers: ["discovery"]
      exporters: ["debug"]
